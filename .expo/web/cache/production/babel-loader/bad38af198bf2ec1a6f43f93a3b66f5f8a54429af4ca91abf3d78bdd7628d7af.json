{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter(function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable;})),t.push.apply(t,o);}return t;}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach(function(r){_defineProperty(e,r,t[r]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r));});}return e;}import{UnavailabilityError}from'expo-modules-core';import AppState from\"react-native-web/dist/exports/AppState\";import Linking from\"react-native-web/dist/exports/Linking\";import Platform from\"react-native-web/dist/exports/Platform\";import processColor from\"react-native-web/dist/exports/processColor\";import ExponentWebBrowser from'./ExpoWebBrowser';import{WebBrowserResultType,WebBrowserPresentationStyle}from'./WebBrowser.types';export{WebBrowserResultType,WebBrowserPresentationStyle};const emptyCustomTabsPackages={defaultBrowserPackage:undefined,preferredBrowserPackage:undefined,browserPackages:[],servicePackages:[]};export async function getCustomTabsSupportingBrowsersAsync(){if(!ExponentWebBrowser.getCustomTabsSupportingBrowsersAsync){throw new UnavailabilityError('WebBrowser','getCustomTabsSupportingBrowsersAsync');}if(true){return emptyCustomTabsPackages;}else{return await ExponentWebBrowser.getCustomTabsSupportingBrowsersAsync();}}export async function warmUpAsync(browserPackage){if(!ExponentWebBrowser.warmUpAsync){throw new UnavailabilityError('WebBrowser','warmUpAsync');}if(true){return{};}else{return await ExponentWebBrowser.warmUpAsync(browserPackage);}}export async function mayInitWithUrlAsync(url,browserPackage){if(!ExponentWebBrowser.mayInitWithUrlAsync){throw new UnavailabilityError('WebBrowser','mayInitWithUrlAsync');}if(true){return{};}else{return await ExponentWebBrowser.mayInitWithUrlAsync(url,browserPackage);}}export async function coolDownAsync(browserPackage){if(!ExponentWebBrowser.coolDownAsync){throw new UnavailabilityError('WebBrowser','coolDownAsync');}if(true){return{};}else{return await ExponentWebBrowser.coolDownAsync(browserPackage);}}export async function openBrowserAsync(url,browserParams={}){if(!ExponentWebBrowser.openBrowserAsync){throw new UnavailabilityError('WebBrowser','openBrowserAsync');}let result;try{result=await ExponentWebBrowser.openBrowserAsync(url,_processOptions(browserParams));}catch{return{type:WebBrowserResultType.LOCKED};}return result;}export function dismissBrowser(){ExponentWebBrowser.dismissBrowser?.();}export async function openAuthSessionAsync(url,redirectUrl,options={}){if(_authSessionIsNativelySupported()){if(!ExponentWebBrowser.openAuthSessionAsync){throw new UnavailabilityError('WebBrowser','openAuthSessionAsync');}if(['ios','web'].includes(\"web\")){return ExponentWebBrowser.openAuthSessionAsync(url,redirectUrl,_processOptions(options));}return ExponentWebBrowser.openAuthSessionAsync(url,redirectUrl);}else{return _openAuthSessionPolyfillAsync(url,redirectUrl,options);}}export function dismissAuthSession(){if(_authSessionIsNativelySupported()){if(!ExponentWebBrowser.dismissAuthSession){throw new UnavailabilityError('WebBrowser','dismissAuthSession');}ExponentWebBrowser.dismissAuthSession();}else{if(!ExponentWebBrowser.dismissBrowser){throw new UnavailabilityError('WebBrowser','dismissAuthSession');}ExponentWebBrowser.dismissBrowser();}}export function maybeCompleteAuthSession(options={}){if(ExponentWebBrowser.maybeCompleteAuthSession){return ExponentWebBrowser.maybeCompleteAuthSession(options);}return{type:'failed',message:'Not supported on this platform'};}function _processOptions(options){return _objectSpread(_objectSpread({},options),{},{controlsColor:processColor(options.controlsColor),toolbarColor:processColor(options.toolbarColor),secondaryToolbarColor:processColor(options.secondaryToolbarColor)});}function _authSessionIsNativelySupported(){if(false){return false;}else if(true){return true;}const versionNumber=parseInt(String(Platform.Version),10);return versionNumber>=11;}let _redirectSubscription=null;let _onWebBrowserCloseAndroid=null;let _isAppStateAvailable=AppState.currentState!==null;function _onAppStateChangeAndroid(state){if(!_isAppStateAvailable){_isAppStateAvailable=true;return;}if(state==='active'&&_onWebBrowserCloseAndroid){_onWebBrowserCloseAndroid();}}async function _openBrowserAndWaitAndroidAsync(startUrl,browserParams={}){const appStateChangedToActive=new Promise(resolve=>{_onWebBrowserCloseAndroid=resolve;});const stateChangeSubscription=AppState.addEventListener('change',_onAppStateChangeAndroid);let result={type:WebBrowserResultType.CANCEL};let type=null;try{({type}=await openBrowserAsync(startUrl,browserParams));}catch(e){stateChangeSubscription.remove();_onWebBrowserCloseAndroid=null;throw e;}if(type==='opened'){await appStateChangedToActive;result={type:WebBrowserResultType.DISMISS};}stateChangeSubscription.remove();_onWebBrowserCloseAndroid=null;return result;}async function _openAuthSessionPolyfillAsync(startUrl,returnUrl,browserParams={}){if(_redirectSubscription){throw new Error(`The WebBrowser's auth session is in an invalid state with a redirect handler set when it should not be`);}if(_onWebBrowserCloseAndroid){throw new Error(`WebBrowser is already open, only one can be open at a time`);}try{if(false){return await Promise.race([_openBrowserAndWaitAndroidAsync(startUrl,browserParams),_waitForRedirectAsync(returnUrl)]);}else{return await Promise.race([openBrowserAsync(startUrl,browserParams),_waitForRedirectAsync(returnUrl)]);}}finally{if(ExponentWebBrowser.dismissBrowser){ExponentWebBrowser.dismissBrowser();}_stopWaitingForRedirect();}}function _stopWaitingForRedirect(){if(!_redirectSubscription){throw new Error(`The WebBrowser auth session is in an invalid state with no redirect handler when one should be set`);}_redirectSubscription.remove();_redirectSubscription=null;}function _waitForRedirectAsync(returnUrl){return new Promise(resolve=>{const redirectHandler=event=>{if(returnUrl&&event.url.startsWith(returnUrl)){resolve({url:event.url,type:'success'});}};_redirectSubscription=Linking.addEventListener('url',redirectHandler);});}","map":{"version":3,"names":["UnavailabilityError","AppState","Linking","Platform","processColor","ExponentWebBrowser","WebBrowserResultType","WebBrowserPresentationStyle","emptyCustomTabsPackages","defaultBrowserPackage","undefined","preferredBrowserPackage","browserPackages","servicePackages","getCustomTabsSupportingBrowsersAsync","warmUpAsync","browserPackage","mayInitWithUrlAsync","url","coolDownAsync","openBrowserAsync","browserParams","result","_processOptions","type","LOCKED","dismissBrowser","openAuthSessionAsync","redirectUrl","options","_authSessionIsNativelySupported","includes","_openAuthSessionPolyfillAsync","dismissAuthSession","maybeCompleteAuthSession","message","_objectSpread","controlsColor","toolbarColor","secondaryToolbarColor","versionNumber","parseInt","String","Version","_redirectSubscription","_onWebBrowserCloseAndroid","_isAppStateAvailable","currentState","_onAppStateChangeAndroid","state","_openBrowserAndWaitAndroidAsync","startUrl","appStateChangedToActive","Promise","resolve","stateChangeSubscription","addEventListener","CANCEL","e","remove","DISMISS","returnUrl","Error","race","_waitForRedirectAsync","_stopWaitingForRedirect","redirectHandler","event","startsWith"],"sources":["/home/kunal/Documents/Music-app/node_modules/expo-web-browser/src/WebBrowser.ts"],"sourcesContent":["import { UnavailabilityError } from 'expo-modules-core';\nimport {\n  AppState,\n  AppStateStatus,\n  Linking,\n  Platform,\n  EmitterSubscription,\n  processColor,\n} from 'react-native';\n\nimport ExponentWebBrowser from './ExpoWebBrowser';\nimport {\n  RedirectEvent,\n  WebBrowserAuthSessionResult,\n  WebBrowserCompleteAuthSessionOptions,\n  WebBrowserCompleteAuthSessionResult,\n  WebBrowserCoolDownResult,\n  WebBrowserCustomTabsResults,\n  WebBrowserMayInitWithUrlResult,\n  WebBrowserOpenOptions,\n  WebBrowserRedirectResult,\n  WebBrowserResult,\n  WebBrowserResultType,\n  WebBrowserWarmUpResult,\n  WebBrowserWindowFeatures,\n  WebBrowserPresentationStyle,\n  AuthSessionOpenOptions,\n} from './WebBrowser.types';\n\nexport {\n  WebBrowserAuthSessionResult,\n  WebBrowserCompleteAuthSessionOptions,\n  WebBrowserCompleteAuthSessionResult,\n  WebBrowserCoolDownResult,\n  WebBrowserCustomTabsResults,\n  WebBrowserMayInitWithUrlResult,\n  WebBrowserOpenOptions,\n  WebBrowserRedirectResult,\n  WebBrowserResult,\n  WebBrowserResultType,\n  WebBrowserWarmUpResult,\n  WebBrowserWindowFeatures,\n  WebBrowserPresentationStyle,\n  AuthSessionOpenOptions,\n};\n\nconst emptyCustomTabsPackages: WebBrowserCustomTabsResults = {\n  defaultBrowserPackage: undefined,\n  preferredBrowserPackage: undefined,\n  browserPackages: [],\n  servicePackages: [],\n};\n\n// @needsAudit\n/**\n * Returns a list of applications package names supporting Custom Tabs, Custom Tabs\n * service, user chosen and preferred one. This may not be fully reliable, since it uses\n * `PackageManager.getResolvingActivities` under the hood. (For example, some browsers might not be\n * present in browserPackages list once another browser is set to default.)\n *\n * @return The promise which fulfils with [`WebBrowserCustomTabsResults`](#webbrowsercustomtabsresults) object.\n * @platform android\n */\nexport async function getCustomTabsSupportingBrowsersAsync(): Promise<WebBrowserCustomTabsResults> {\n  if (!ExponentWebBrowser.getCustomTabsSupportingBrowsersAsync) {\n    throw new UnavailabilityError('WebBrowser', 'getCustomTabsSupportingBrowsersAsync');\n  }\n  if (Platform.OS !== 'android') {\n    return emptyCustomTabsPackages;\n  } else {\n    return await ExponentWebBrowser.getCustomTabsSupportingBrowsersAsync();\n  }\n}\n\n// @needsAudit\n/**\n * This method calls `warmUp` method on [CustomTabsClient](https://developer.android.com/reference/android/support/customtabs/CustomTabsClient.html#warmup(long))\n * for specified package.\n *\n * @param browserPackage Package of browser to be warmed up. If not set, preferred browser will be warmed.\n *\n * @return A promise which fulfils with `WebBrowserWarmUpResult` object.\n * @platform android\n */\nexport async function warmUpAsync(browserPackage?: string): Promise<WebBrowserWarmUpResult> {\n  if (!ExponentWebBrowser.warmUpAsync) {\n    throw new UnavailabilityError('WebBrowser', 'warmUpAsync');\n  }\n  if (Platform.OS !== 'android') {\n    return {};\n  } else {\n    return await ExponentWebBrowser.warmUpAsync(browserPackage);\n  }\n}\n\n// @needsAudit\n/**\n * This method initiates (if needed) [CustomTabsSession](https://developer.android.com/reference/android/support/customtabs/CustomTabsSession.html#maylaunchurl)\n * and calls its `mayLaunchUrl` method for browser specified by the package.\n *\n * @param url The url of page that is likely to be loaded first when opening browser.\n * @param browserPackage Package of browser to be informed. If not set, preferred\n * browser will be used.\n *\n * @return A promise which fulfils with `WebBrowserMayInitWithUrlResult` object.\n * @platform android\n */\nexport async function mayInitWithUrlAsync(\n  url: string,\n  browserPackage?: string\n): Promise<WebBrowserMayInitWithUrlResult> {\n  if (!ExponentWebBrowser.mayInitWithUrlAsync) {\n    throw new UnavailabilityError('WebBrowser', 'mayInitWithUrlAsync');\n  }\n  if (Platform.OS !== 'android') {\n    return {};\n  } else {\n    return await ExponentWebBrowser.mayInitWithUrlAsync(url, browserPackage);\n  }\n}\n\n// @needsAudit\n/**\n * This methods removes all bindings to services created by [`warmUpAsync`](#webbrowserwarmupasyncbrowserpackage)\n * or [`mayInitWithUrlAsync`](#webbrowsermayinitwithurlasyncurl-browserpackage). You should call\n * this method once you don't need them to avoid potential memory leaks. However, those binding\n * would be cleared once your application is destroyed, which might be sufficient in most cases.\n *\n * @param browserPackage Package of browser to be cooled. If not set, preferred browser will be used.\n *\n * @return The promise which fulfils with ` WebBrowserCoolDownResult` when cooling is performed, or\n * an empty object when there was no connection to be dismissed.\n * @platform android\n */\nexport async function coolDownAsync(browserPackage?: string): Promise<WebBrowserCoolDownResult> {\n  if (!ExponentWebBrowser.coolDownAsync) {\n    throw new UnavailabilityError('WebBrowser', 'coolDownAsync');\n  }\n  if (Platform.OS !== 'android') {\n    return {};\n  } else {\n    return await ExponentWebBrowser.coolDownAsync(browserPackage);\n  }\n}\n\n// @needsAudit\n/**\n * Opens the url with Safari in a modal on iOS using [`SFSafariViewController`](https://developer.apple.com/documentation/safariservices/sfsafariviewcontroller),\n * and Chrome in a new [custom tab](https://developer.chrome.com/multidevice/android/customtabs)\n * on Android. On iOS, the modal Safari will not share cookies with the system Safari. If you need\n * this, use [`openAuthSessionAsync`](#webbrowseropenauthsessionasyncurl-redirecturl-options).\n *\n * @param url The url to open in the web browser.\n * @param browserParams A dictionary of key-value pairs.\n *\n * @return The promise behaves differently based on the platform.\n * On Android promise resolves with `{ type: 'opened' }` if we were able to open browser.\n * On iOS:\n * - If the user closed the web browser, the Promise resolves with `{ type: 'cancel' }`.\n * - If the browser is closed using [`dismissBrowser`](#webbrowserdismissbrowser), the Promise resolves with `{ type: 'dismiss' }`.\n */\nexport async function openBrowserAsync(\n  url: string,\n  browserParams: WebBrowserOpenOptions = {}\n): Promise<WebBrowserResult> {\n  if (!ExponentWebBrowser.openBrowserAsync) {\n    throw new UnavailabilityError('WebBrowser', 'openBrowserAsync');\n  }\n\n  let result: WebBrowserResult;\n  try {\n    result = await ExponentWebBrowser.openBrowserAsync(url, _processOptions(browserParams));\n  } catch {\n    return { type: WebBrowserResultType.LOCKED };\n  }\n\n  return result;\n}\n\n// @needsAudit\n/**\n * Dismisses the presented web browser.\n *\n * @return The `void` on successful attempt, or throws error, if dismiss functionality is not avaiable.\n * @platform ios\n */\nexport function dismissBrowser(): void {\n  ExponentWebBrowser.dismissBrowser?.();\n}\n\n// @needsAudit\n/**\n * # On Android:\n * This will be done using a \"custom Chrome tabs\" browser, [AppState](https://reactnative.dev/docs/appstate),\n * and [Linking](./linking/) APIs.\n *\n * # On iOS:\n * Opens the url with Safari in a modal using `ASWebAuthenticationSession`. The user will be asked\n * whether to allow the app to authenticate using the given url.\n * To handle redirection back to the mobile application, the redirect URI set in the authentication server\n * has to use the protocol provided as the scheme in **app.json** [`expo.scheme`](./../config/app/#scheme).\n * For example, `demo://` not `https://` protocol.\n * Using `Linking.addEventListener` is not needed and can have side effects.\n *\n * # On web:\n * > This API can only be used in a secure environment (localhost/https).\n * to test this. Otherwise, an error with code [`ERR_WEB_BROWSER_CRYPTO`](#err_web_browser_crypto) will be thrown.\n * This will use the browser's [`window.open()`](https://developer.mozilla.org/en-US/docs/Web/API/Window/open) API.\n * - _Desktop_: This will create a new web popup window in the browser that can be closed later using `WebBrowser.maybeCompleteAuthSession()`.\n * - _Mobile_: This will open a new tab in the browser which can be closed using `WebBrowser.maybeCompleteAuthSession()`.\n *\n * How this works on web:\n * - A crypto state will be created for verifying the redirect.\n *   - This means you need to run with `npx expo start --https`\n * - The state will be added to the window's `localstorage`. This ensures that auth cannot complete\n *   unless it's done from a page running with the same origin as it was started.\n *   Ex: if `openAuthSessionAsync` is invoked on `https://localhost:19006`, then `maybeCompleteAuthSession`\n *   must be invoked on a page hosted from the origin `https://localhost:19006`. Using a different\n *   website, or even a different host like `https://128.0.0.*:19006` for example will not work.\n * - A timer will be started to check for every 1000 milliseconds (1 second) to detect if the window\n *   has been closed by the user. If this happens then a promise will resolve with `{ type: 'dismiss' }`.\n *\n * > On mobile web, Chrome and Safari will block any call to [`window.open()`](https://developer.mozilla.org/en-US/docs/Web/API/Window/open)\n * which takes too long to fire after a user interaction. This method must be invoked immediately\n * after a user interaction. If the event is blocked, an error with code [`ERR_WEB_BROWSER_BLOCKED`](#err_web_browser_blocked) will be thrown.\n *\n * @param url The url to open in the web browser. This should be a login page.\n * @param redirectUrl _Optional_ - The url to deep link back into your app.\n * On web, this defaults to the output of [`Linking.createURL(\"\")`](./linking/#linkingcreateurlpath-namedparameters).\n * @param options _Optional_ - An object extending the [`WebBrowserOpenOptions`](#webbrowseropenoptions).\n * If there is no native AuthSession implementation available (which is the case on Android)\n * these params will be used in the browser polyfill. If there is a native AuthSession implementation,\n * these params will be ignored.\n *\n * @return\n * - If the user does not permit the application to authenticate with the given url, the Promise fulfills with `{ type: 'cancel' }` object.\n * - If the user closed the web browser, the Promise fulfills with `{ type: 'cancel' }` object.\n * - If the browser is closed using [`dismissBrowser`](#webbrowserdismissbrowser),\n * the Promise fulfills with `{ type: 'dismiss' }` object.\n */\nexport async function openAuthSessionAsync(\n  url: string,\n  redirectUrl?: string | null,\n  options: AuthSessionOpenOptions = {}\n): Promise<WebBrowserAuthSessionResult> {\n  if (_authSessionIsNativelySupported()) {\n    if (!ExponentWebBrowser.openAuthSessionAsync) {\n      throw new UnavailabilityError('WebBrowser', 'openAuthSessionAsync');\n    }\n    if (['ios', 'web'].includes(Platform.OS)) {\n      return ExponentWebBrowser.openAuthSessionAsync(url, redirectUrl, _processOptions(options));\n    }\n    return ExponentWebBrowser.openAuthSessionAsync(url, redirectUrl);\n  } else {\n    return _openAuthSessionPolyfillAsync(url, redirectUrl, options);\n  }\n}\n\n// @docsMissing\nexport function dismissAuthSession(): void {\n  if (_authSessionIsNativelySupported()) {\n    if (!ExponentWebBrowser.dismissAuthSession) {\n      throw new UnavailabilityError('WebBrowser', 'dismissAuthSession');\n    }\n    ExponentWebBrowser.dismissAuthSession();\n  } else {\n    if (!ExponentWebBrowser.dismissBrowser) {\n      throw new UnavailabilityError('WebBrowser', 'dismissAuthSession');\n    }\n    ExponentWebBrowser.dismissBrowser();\n  }\n}\n\n// @needsAudit\n/**\n * Possibly completes an authentication session on web in a window popup. The method\n * should be invoked on the page that the window redirects to.\n *\n * @param options\n *\n * @return Returns an object with message about why the redirect failed or succeeded:\n *\n * If `type` is set to `failed`, the reason depends on the message:\n * - `Not supported on this platform`: If the platform doesn't support this method (iOS, Android).\n * - `Cannot use expo-web-browser in a non-browser environment`: If the code was executed in an SSR\n *   or node environment.\n * - `No auth session is currently in progress`: (the cached state wasn't found in local storage).\n *   This can happen if the window redirects to an origin (website) that is different to the initial\n *   website origin. If this happens in development, it may be because the auth started on localhost\n *   and finished on your computer port (Ex: `128.0.0.*`). This is controlled by the `redirectUrl`\n *   and `returnUrl`.\n * - `Current URL \"<URL>\" and original redirect URL \"<URL>\" do not match`: This can occur when the\n *   redirect URL doesn't match what was initial defined as the `returnUrl`. You can skip this test\n *   in development by passing `{ skipRedirectCheck: true }` to the function.\n *\n * If `type` is set to `success`, the parent window will attempt to close the child window immediately.\n *\n * If the error `ERR_WEB_BROWSER_REDIRECT` was thrown, it may mean that the parent window was\n * reloaded before the auth was completed. In this case you'll need to close the child window manually.\n *\n * @platform web\n */\nexport function maybeCompleteAuthSession(\n  options: WebBrowserCompleteAuthSessionOptions = {}\n): WebBrowserCompleteAuthSessionResult {\n  if (ExponentWebBrowser.maybeCompleteAuthSession) {\n    return ExponentWebBrowser.maybeCompleteAuthSession(options);\n  }\n  return { type: 'failed', message: 'Not supported on this platform' };\n}\n\nfunction _processOptions(options: WebBrowserOpenOptions) {\n  return {\n    ...options,\n    controlsColor: processColor(options.controlsColor),\n    toolbarColor: processColor(options.toolbarColor),\n    secondaryToolbarColor: processColor(options.secondaryToolbarColor),\n  };\n}\n\n/* iOS <= 10 and Android polyfill for SFAuthenticationSession flow */\n\nfunction _authSessionIsNativelySupported(): boolean {\n  if (Platform.OS === 'android') {\n    return false;\n  } else if (Platform.OS === 'web') {\n    return true;\n  }\n\n  const versionNumber = parseInt(String(Platform.Version), 10);\n  return versionNumber >= 11;\n}\n\nlet _redirectSubscription: EmitterSubscription | null = null;\n\n/*\n * openBrowserAsync on Android doesn't wait until closed, so we need to polyfill\n * it with AppState\n */\n\n// Store the `resolve` function from a Promise to fire when the AppState\n// returns to active\nlet _onWebBrowserCloseAndroid: null | (() => void) = null;\n\n// If the initial AppState.currentState is null, we assume that the first call to\n// AppState#change event is not actually triggered by a real change,\n// is triggered instead by the bridge capturing the current state\n// (https://reactnative.dev/docs/appstate#basic-usage)\nlet _isAppStateAvailable: boolean = AppState.currentState !== null;\nfunction _onAppStateChangeAndroid(state: AppStateStatus) {\n  if (!_isAppStateAvailable) {\n    _isAppStateAvailable = true;\n    return;\n  }\n\n  if (state === 'active' && _onWebBrowserCloseAndroid) {\n    _onWebBrowserCloseAndroid();\n  }\n}\n\nasync function _openBrowserAndWaitAndroidAsync(\n  startUrl: string,\n  browserParams: WebBrowserOpenOptions = {}\n): Promise<WebBrowserResult> {\n  const appStateChangedToActive = new Promise<void>((resolve) => {\n    _onWebBrowserCloseAndroid = resolve;\n  });\n  const stateChangeSubscription = AppState.addEventListener('change', _onAppStateChangeAndroid);\n\n  let result: WebBrowserResult = { type: WebBrowserResultType.CANCEL };\n  let type: string | null = null;\n\n  try {\n    ({ type } = await openBrowserAsync(startUrl, browserParams));\n  } catch (e) {\n    stateChangeSubscription.remove();\n    _onWebBrowserCloseAndroid = null;\n    throw e;\n  }\n\n  if (type === 'opened') {\n    await appStateChangedToActive;\n    result = { type: WebBrowserResultType.DISMISS };\n  }\n\n  stateChangeSubscription.remove();\n  _onWebBrowserCloseAndroid = null;\n  return result;\n}\n\nasync function _openAuthSessionPolyfillAsync(\n  startUrl: string,\n  returnUrl: string | null | undefined,\n  browserParams: WebBrowserOpenOptions = {}\n): Promise<WebBrowserAuthSessionResult> {\n  if (_redirectSubscription) {\n    throw new Error(\n      `The WebBrowser's auth session is in an invalid state with a redirect handler set when it should not be`\n    );\n  }\n\n  if (_onWebBrowserCloseAndroid) {\n    throw new Error(`WebBrowser is already open, only one can be open at a time`);\n  }\n\n  try {\n    if (Platform.OS === 'android') {\n      return await Promise.race([\n        _openBrowserAndWaitAndroidAsync(startUrl, browserParams),\n        _waitForRedirectAsync(returnUrl),\n      ]);\n    } else {\n      return await Promise.race([\n        openBrowserAsync(startUrl, browserParams),\n        _waitForRedirectAsync(returnUrl),\n      ]);\n    }\n  } finally {\n    // We can't dismiss the browser on Android, only call this when it's available.\n    // Users on Android need to manually press the 'x' button in Chrome Custom Tabs, sadly.\n    if (ExponentWebBrowser.dismissBrowser) {\n      ExponentWebBrowser.dismissBrowser();\n    }\n\n    _stopWaitingForRedirect();\n  }\n}\n\nfunction _stopWaitingForRedirect() {\n  if (!_redirectSubscription) {\n    throw new Error(\n      `The WebBrowser auth session is in an invalid state with no redirect handler when one should be set`\n    );\n  }\n\n  _redirectSubscription.remove();\n  _redirectSubscription = null;\n}\n\nfunction _waitForRedirectAsync(\n  returnUrl: string | null | undefined\n): Promise<WebBrowserRedirectResult> {\n  // Note that this Promise never resolves when `returnUrl` is nullish\n  return new Promise((resolve) => {\n    const redirectHandler = (event: RedirectEvent) => {\n      if (returnUrl && event.url.startsWith(returnUrl)) {\n        resolve({ url: event.url, type: 'success' });\n      }\n    };\n\n    _redirectSubscription = Linking.addEventListener('url', redirectHandler);\n  });\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import{CodedError,Platform,UnavailabilityError}from'expo-modules-core';import ExpoFontLoader from'./ExpoFontLoader';import{FontDisplay}from'./Font.types';import{getAssetForSource,loadSingleFontAsync,fontFamilyNeedsScoping,getNativeFontName}from'./FontLoader';import{loaded,loadPromises}from'./memory';import{registerStaticFont}from'./server';export function processFontFamily(fontFamily){if(!fontFamily||!fontFamilyNeedsScoping(fontFamily)){return fontFamily;}if(!isLoaded(fontFamily)){if(false){if(isLoading(fontFamily)){console.warn(`You started loading the font \"${fontFamily}\", but used it before it finished loading. You need to wait for Font.loadAsync to complete before using the font.`);}else{console.warn(`fontFamily \"${fontFamily}\" is not a system font and has not been loaded through expo-font.`);}}}return`ExpoFont-${getNativeFontName(fontFamily)}`;}export function isLoaded(fontFamily){if(true){return fontFamily in loaded||!!ExpoFontLoader.isLoaded(fontFamily);}return fontFamily in loaded||ExpoFontLoader.customNativeFonts?.includes(fontFamily);}export function isLoading(fontFamily){return fontFamily in loadPromises;}export function loadAsync(fontFamilyOrFontMap,source){const isServer=true&&false;if(typeof fontFamilyOrFontMap==='object'){if(source){return Promise.reject(new CodedError(`ERR_FONT_API`,`No fontFamily can be used for the provided source: ${source}. The second argument of \\`loadAsync()\\` can only be used with a \\`string\\` value as the first argument.`));}const fontMap=fontFamilyOrFontMap;const names=Object.keys(fontMap);if(isServer){names.map(name=>registerStaticFont(name,fontMap[name]));return Promise.resolve();}return Promise.all(names.map(name=>loadFontInNamespaceAsync(name,fontMap[name]))).then(()=>{});}if(isServer){registerStaticFont(fontFamilyOrFontMap,source);return Promise.resolve();}return loadFontInNamespaceAsync(fontFamilyOrFontMap,source);}async function loadFontInNamespaceAsync(fontFamily,source){if(!source){throw new CodedError(`ERR_FONT_SOURCE`,`Cannot load null or undefined font source: { \"${fontFamily}\": ${source} }. Expected asset of type \\`FontSource\\` for fontFamily of name: \"${fontFamily}\"`);}if(loaded[fontFamily]){return;}if(loadPromises.hasOwnProperty(fontFamily)){return loadPromises[fontFamily];}const asset=getAssetForSource(source);loadPromises[fontFamily]=(async()=>{try{await loadSingleFontAsync(fontFamily,asset);loaded[fontFamily]=true;}finally{delete loadPromises[fontFamily];}})();await loadPromises[fontFamily];}export async function unloadAllAsync(){if(!ExpoFontLoader.unloadAllAsync){throw new UnavailabilityError('expo-font','unloadAllAsync');}if(Object.keys(loadPromises).length){throw new CodedError(`ERR_UNLOAD`,`Cannot unload fonts while they're still loading: ${Object.keys(loadPromises).join(', ')}`);}for(const fontFamily of Object.keys(loaded)){delete loaded[fontFamily];}await ExpoFontLoader.unloadAllAsync();}export async function unloadAsync(fontFamilyOrFontMap,options){if(!ExpoFontLoader.unloadAsync){throw new UnavailabilityError('expo-font','unloadAsync');}if(typeof fontFamilyOrFontMap==='object'){if(options){throw new CodedError(`ERR_FONT_API`,`No fontFamily can be used for the provided options: ${options}. The second argument of \\`unloadAsync()\\` can only be used with a \\`string\\` value as the first argument.`);}const fontMap=fontFamilyOrFontMap;const names=Object.keys(fontMap);await Promise.all(names.map(name=>unloadFontInNamespaceAsync(name,fontMap[name])));return;}return await unloadFontInNamespaceAsync(fontFamilyOrFontMap,options);}async function unloadFontInNamespaceAsync(fontFamily,options){if(!loaded[fontFamily]){return;}else{delete loaded[fontFamily];}const nativeFontName=getNativeFontName(fontFamily);if(!nativeFontName){throw new CodedError(`ERR_FONT_FAMILY`,`Cannot unload an empty name`);}await ExpoFontLoader.unloadAsync(nativeFontName,options);}export{FontDisplay};","map":{"version":3,"names":["CodedError","Platform","UnavailabilityError","ExpoFontLoader","FontDisplay","getAssetForSource","loadSingleFontAsync","fontFamilyNeedsScoping","getNativeFontName","loaded","loadPromises","registerStaticFont","processFontFamily","fontFamily","isLoaded","isLoading","console","warn","customNativeFonts","includes","loadAsync","fontFamilyOrFontMap","source","isServer","Promise","reject","fontMap","names","Object","keys","map","name","resolve","all","loadFontInNamespaceAsync","then","hasOwnProperty","asset","unloadAllAsync","length","join","unloadAsync","options","unloadFontInNamespaceAsync","nativeFontName"],"sources":["/home/kunal/Documents/Music-app/node_modules/expo-font/src/Font.ts"],"sourcesContent":["import { CodedError, Platform, UnavailabilityError } from 'expo-modules-core';\n\nimport ExpoFontLoader from './ExpoFontLoader';\nimport { FontDisplay, FontSource, FontResource, UnloadFontOptions } from './Font.types';\nimport {\n  getAssetForSource,\n  loadSingleFontAsync,\n  fontFamilyNeedsScoping,\n  getNativeFontName,\n} from './FontLoader';\nimport { loaded, loadPromises } from './memory';\nimport { registerStaticFont } from './server';\n\n// @needsAudit\n// note(brentvatne): at some point we may want to warn if this is called outside of a managed app.\n/**\n * Used to transform font family names to the scoped name. This does not need to\n * be called in standalone or bare apps but it will return unscoped font family\n * names if it is called in those contexts.\n *\n * @param fontFamily Name of font to process.\n * @returns Returns a name processed for use with the [current workflow](https://docs.expo.dev/archive/managed-vs-bare/).\n */\nexport function processFontFamily(fontFamily: string | null): string | null {\n  if (!fontFamily || !fontFamilyNeedsScoping(fontFamily)) {\n    return fontFamily;\n  }\n\n  if (!isLoaded(fontFamily)) {\n    if (__DEV__) {\n      if (isLoading(fontFamily)) {\n        console.warn(\n          `You started loading the font \"${fontFamily}\", but used it before it finished loading. You need to wait for Font.loadAsync to complete before using the font.`\n        );\n      } else {\n        console.warn(\n          `fontFamily \"${fontFamily}\" is not a system font and has not been loaded through expo-font.`\n        );\n      }\n    }\n  }\n\n  return `ExpoFont-${getNativeFontName(fontFamily)}`;\n}\n\n// @needsAudit\n/**\n * Synchronously detect if the font for `fontFamily` has finished loading.\n *\n * @param fontFamily The name used to load the `FontResource`.\n * @return Returns `true` if the font has fully loaded.\n */\nexport function isLoaded(fontFamily: string): boolean {\n  if (Platform.OS === 'web') {\n    return fontFamily in loaded || !!ExpoFontLoader.isLoaded(fontFamily);\n  }\n  return fontFamily in loaded || ExpoFontLoader.customNativeFonts?.includes(fontFamily);\n}\n\n// @needsAudit\n/**\n * Synchronously detect if the font for `fontFamily` is still being loaded.\n *\n * @param fontFamily The name used to load the `FontResource`.\n * @returns Returns `true` if the font is still loading.\n */\nexport function isLoading(fontFamily: string): boolean {\n  return fontFamily in loadPromises;\n}\n\n// @needsAudit\n/**\n * Highly efficient method for loading fonts from static or remote resources which can then be used\n * with the platform's native text elements. In the browser this generates a `@font-face` block in\n * a shared style sheet for fonts. No CSS is needed to use this method.\n *\n * @param fontFamilyOrFontMap string or map of values that can be used as the [`fontFamily`](https://reactnative.dev/docs/text#style)\n * style prop with React Native Text elements.\n * @param source the font asset that should be loaded into the `fontFamily` namespace.\n *\n * @return Returns a promise that fulfils when the font has loaded. Often you may want to wrap the\n * method in a `try/catch/finally` to ensure the app continues if the font fails to load.\n */\nexport function loadAsync(\n  fontFamilyOrFontMap: string | Record<string, FontSource>,\n  source?: FontSource\n): Promise<void> {\n  // NOTE(EvanBacon): Static render pass on web must be synchronous to collect all fonts.\n  // Because of this, `loadAsync` doesn't use the `async` keyword and deviates from the\n  // standard Expo SDK style guide.\n  const isServer = Platform.OS === 'web' && typeof window === 'undefined';\n\n  if (typeof fontFamilyOrFontMap === 'object') {\n    if (source) {\n      return Promise.reject(\n        new CodedError(\n          `ERR_FONT_API`,\n          `No fontFamily can be used for the provided source: ${source}. The second argument of \\`loadAsync()\\` can only be used with a \\`string\\` value as the first argument.`\n        )\n      );\n    }\n    const fontMap = fontFamilyOrFontMap;\n    const names = Object.keys(fontMap);\n\n    if (isServer) {\n      names.map((name) => registerStaticFont(name, fontMap[name]));\n      return Promise.resolve();\n    }\n\n    return Promise.all(names.map((name) => loadFontInNamespaceAsync(name, fontMap[name]))).then(\n      () => {}\n    );\n  }\n\n  if (isServer) {\n    registerStaticFont(fontFamilyOrFontMap, source);\n    return Promise.resolve();\n  }\n\n  return loadFontInNamespaceAsync(fontFamilyOrFontMap, source);\n}\n\nasync function loadFontInNamespaceAsync(\n  fontFamily: string,\n  source?: FontSource | null\n): Promise<void> {\n  if (!source) {\n    throw new CodedError(\n      `ERR_FONT_SOURCE`,\n      `Cannot load null or undefined font source: { \"${fontFamily}\": ${source} }. Expected asset of type \\`FontSource\\` for fontFamily of name: \"${fontFamily}\"`\n    );\n  }\n\n  if (loaded[fontFamily]) {\n    return;\n  }\n\n  if (loadPromises.hasOwnProperty(fontFamily)) {\n    return loadPromises[fontFamily];\n  }\n\n  // Important: we want all callers that concurrently try to load the same font to await the same\n  // promise. If we're here, we haven't created the promise yet. To ensure we create only one\n  // promise in the program, we need to create the promise synchronously without yielding the event\n  // loop from this point.\n\n  const asset = getAssetForSource(source);\n  loadPromises[fontFamily] = (async () => {\n    try {\n      await loadSingleFontAsync(fontFamily, asset);\n      loaded[fontFamily] = true;\n    } finally {\n      delete loadPromises[fontFamily];\n    }\n  })();\n\n  await loadPromises[fontFamily];\n}\n\n// @needsAudit\n/**\n * Unloads all the custom fonts. This is used for testing.\n */\nexport async function unloadAllAsync(): Promise<void> {\n  if (!ExpoFontLoader.unloadAllAsync) {\n    throw new UnavailabilityError('expo-font', 'unloadAllAsync');\n  }\n\n  if (Object.keys(loadPromises).length) {\n    throw new CodedError(\n      `ERR_UNLOAD`,\n      `Cannot unload fonts while they're still loading: ${Object.keys(loadPromises).join(', ')}`\n    );\n  }\n\n  for (const fontFamily of Object.keys(loaded)) {\n    delete loaded[fontFamily];\n  }\n\n  await ExpoFontLoader.unloadAllAsync();\n}\n\n// @needsAudit\n/**\n * Unload custom fonts matching the `fontFamily`s and display values provided.\n * Because fonts are automatically unloaded on every platform this is mostly used for testing.\n *\n * @param fontFamilyOrFontMap The name or names of the custom fonts that will be unloaded.\n * @param options When `fontFamilyOrFontMap` is a string, this should be the font source used to load\n * the custom font originally.\n */\nexport async function unloadAsync(\n  fontFamilyOrFontMap: string | Record<string, UnloadFontOptions>,\n  options?: UnloadFontOptions\n): Promise<void> {\n  if (!ExpoFontLoader.unloadAsync) {\n    throw new UnavailabilityError('expo-font', 'unloadAsync');\n  }\n  if (typeof fontFamilyOrFontMap === 'object') {\n    if (options) {\n      throw new CodedError(\n        `ERR_FONT_API`,\n        `No fontFamily can be used for the provided options: ${options}. The second argument of \\`unloadAsync()\\` can only be used with a \\`string\\` value as the first argument.`\n      );\n    }\n    const fontMap = fontFamilyOrFontMap;\n    const names = Object.keys(fontMap);\n    await Promise.all(names.map((name) => unloadFontInNamespaceAsync(name, fontMap[name])));\n    return;\n  }\n\n  return await unloadFontInNamespaceAsync(fontFamilyOrFontMap, options);\n}\n\nasync function unloadFontInNamespaceAsync(\n  fontFamily: string,\n  options?: UnloadFontOptions | null\n): Promise<void> {\n  if (!loaded[fontFamily]) {\n    return;\n  } else {\n    delete loaded[fontFamily];\n  }\n\n  // Important: we want all callers that concurrently try to load the same font to await the same\n  // promise. If we're here, we haven't created the promise yet. To ensure we create only one\n  // promise in the program, we need to create the promise synchronously without yielding the event\n  // loop from this point.\n\n  const nativeFontName = getNativeFontName(fontFamily);\n\n  if (!nativeFontName) {\n    throw new CodedError(`ERR_FONT_FAMILY`, `Cannot unload an empty name`);\n  }\n\n  await ExpoFontLoader.unloadAsync(nativeFontName, options);\n}\n\nexport { FontDisplay, FontSource, FontResource, UnloadFontOptions };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}